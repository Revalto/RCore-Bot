/// <reference types="node" />
import { inspect } from 'util';
import API from './api';
import Upload from './upload';
import Collect from './collect';
import Updates from './updates';
import Snippets from './snippets';
import CallbackService from './utils/callback-service';
import { IVKOptions } from './types';
declare const kAuth: unique symbol;
declare const kStreaming: unique symbol;
/**
 * Main class
 */
export default class VK {
    options: IVKOptions;
    api: API;
    upload: Upload;
    collect: Collect;
    updates: Updates;
    snippets: Snippets;
    callbackService: CallbackService;
    protected [kAuth]: any;
    protected [kStreaming]: any;
    /**
     * Constructor
     */
    constructor(options?: Partial<IVKOptions>);
    /**
     * Returns custom tag
     */
    get [Symbol.toStringTag](): string;
    get auth(): any;
    get streaming(): any;
    /**
     * Sets options
     */
    setOptions(options: Partial<IVKOptions>): this;
    /**
     * Sets token
     */
    set token(token: string | null);
    /**
     * Returns token
     */
    get token(): string | null;
    /**
     * Sets captcha handler
     *
     * ```ts
     * vk.captchaHandler = (payload, retry) => {...};
     * ```
     */
    set captchaHandler(handler: Function);
    /**
     * Sets two-factor handler
     *
     * ```ts
     * vk.twoFactorHandler = (payload, retry) => {...};
     * ```
     */
    set twoFactorHandler(handler: Function);
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
export {};
