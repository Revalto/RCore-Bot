import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IMessageFlagsContextPayload {
    id: number;
    peer_id: number;
    flags: number;
}
export declare type MessageFlagsContextOptions<S> = Omit<IContextOptions<number[], S>, 'type' | 'subTypes'>;
export default class MessageFlagsContext<S = Record<string, any>> extends Context<IMessageFlagsContextPayload, S> {
    constructor(options: MessageFlagsContextOptions<S>);
    /**
     * Verifies that the message is not read
     */
    get isUnread(): boolean;
    /**
     * Checks that the outgoing message
     */
    get isOutbox(): boolean;
    /**
     * Verifies that a reply has been created to the message
     */
    get isReplied(): boolean;
    /**
     * Verifies that the marked message
     */
    get isImportant(): boolean;
    /**
     * Verifies that the message was sent via chat
     */
    get isChat(): boolean;
    /**
     * Verifies that the message was sent by a friend
     */
    get isFriends(): boolean;
    /**
     * Verifies that the message is marked as "Spam"
     */
    get isSpam(): boolean;
    /**
     * Verifies that the message has been deleted (in the Recycle Bin)
     */
    get isDeleted(): boolean;
    /**
     * Verifies that the message was verified by the user for spam
     */
    get isFixed(): boolean;
    /**
     * Verifies that the message contains media content
     */
    get isMedia(): boolean;
    /**
     * Checks that a welcome message from the community
     */
    get isHidden(): boolean;
    /**
     * Message deleted for all recipients
     */
    get isDeletedForAll(): boolean;
    /**
     * Returns the message ID
     */
    get id(): number;
    /**
     * Returns the destination identifier
     */
    get peerId(): number;
    /**
     * Returns the values of the flags
     */
    get flags(): number;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
