import Context, { IContextOptions } from './context';
import { Attachment } from '../attachments';
import Attachmentable from '../shared/attachmentable';
import { inspectCustomData } from '../../utils/constants';
export interface INewAttachmentsContextPayload {
    id: number;
}
export declare type NewAttachmentsContextOptions<S> = Omit<IContextOptions<INewAttachmentsContextPayload, S>, 'type' | 'subTypes'>;
declare class NewAttachmentsContext<S = Record<string, any>> extends Context<INewAttachmentsContextPayload, S> {
    attachments: Attachment[];
    constructor(options: NewAttachmentsContextOptions<S>);
    /**
     * Checks is attachment photo
     */
    get isPhoto(): boolean;
    /**
     * Checks is attachment video
     */
    get isVideo(): boolean;
    /**
     * Checks is attachment audio
     */
    get isAudio(): boolean;
    /**
     * Removes the attachment
     */
    deleteAttachment(): Promise<number>;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
interface NewAttachmentsContext extends Attachmentable {
}
export default NewAttachmentsContext;
