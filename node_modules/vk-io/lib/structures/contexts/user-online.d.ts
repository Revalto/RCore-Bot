import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IUserOnlineContextPayload {
    user_id: number;
    date: number;
    extra: number;
}
export declare type UserOnlineContextOptions<S> = Omit<IContextOptions<[number, number, number, number], S>, 'type' | 'subTypes'>;
export default class UserOnlineContext<S = Record<string, any>> extends Context<IUserOnlineContextPayload, S> {
    constructor(options: UserOnlineContextOptions<S>);
    /**
     * Checks that the user is online
     */
    get isUserOnline(): boolean;
    /**
     * Checks that the user is online
     */
    get isUserOffline(): boolean;
    /**
     * Checks that the user has logged out of the network himself
     */
    get isSelfExit(): boolean;
    /**
     * Checks that the user logged out a timeout
     */
    get isTimeoutExit(): boolean;
    /**
     * Returns the user id
     */
    get userId(): number | null;
    /**
     * Returns the date when this event was created
     */
    get createdAt(): number;
    /**
     * Returns the name of the platform from which the user entered
     */
    get platformName(): string;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
