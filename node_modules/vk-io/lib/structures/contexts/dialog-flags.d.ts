import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IDialogFlagsContextPayload {
    peer_id: number;
    flags: number;
}
export declare type DialogFlagsContextOptions<S> = Omit<IContextOptions<number[], S>, 'type' | 'subTypes'>;
export default class DialogFlagsContext<S = Record<string, any>> extends Context<IDialogFlagsContextPayload, S> {
    constructor(options: DialogFlagsContextOptions<S>);
    /**
     * Checks that an important dialogue
     */
    get isImportant(): boolean;
    /**
     * Checks that the unanswered dialog
     */
    get isUnanswered(): boolean;
    /**
     * Returns the destination identifier
     */
    get peerId(): number;
    /**
     * Returns the values of the flags
     */
    get flags(): number;
    /**
     * Marks the conversation as answered or unchecked
     */
    markAsAnsweredConversation(params: object): Promise<number>;
    /**
     * Marks the conversation as important or removes the mark
     */
    markAsImportantConversation(params: object): Promise<number>;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
