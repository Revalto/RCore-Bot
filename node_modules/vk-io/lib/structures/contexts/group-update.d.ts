import Context, { IContextOptions } from './context';
import Attachmentable from '../shared/attachmentable';
import { Attachment } from '../attachments';
import { inspectCustomData } from '../../utils/constants';
export interface IGroupUpdateContextPayload {
    user_id: number;
    admin_id: number;
    level_old?: number;
    level_new?: number;
    changes?: Record<string, {
        old_value: string;
        new_value: string;
    }>;
    photo?: object;
}
export declare type GroupUpdateContextOptions<S> = Omit<IContextOptions<IGroupUpdateContextPayload, S>, 'type' | 'subTypes'>;
declare class GroupUpdateContext<S = Record<string, any>> extends Context<IGroupUpdateContextPayload, S> {
    attachments: Attachment[];
    constructor(options: GroupUpdateContextOptions<S>);
    /**
     * Checks is change photo
     */
    get isChangePhoto(): boolean;
    /**
     * Checks is change officers
     */
    get isChangeOfficers(): boolean;
    /**
     * Checks is change settings
     */
    get isChangeSettings(): boolean;
    /**
     * Returns the identifier admin
     */
    get adminId(): number | null;
    /**
     * Returns the identifier user
     */
    get userId(): number;
    /**
     * Returns the old level permission
     */
    get oldLevel(): number | null;
    /**
     * Returns the new level permission
     */
    get newLevel(): number | null;
    /**
     * Returns the changes settings
     */
    get changes(): Record<string, {
        old_value: string;
        new_value: string;
    }> | null;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
interface GroupUpdateContext extends Attachmentable {
}
export default GroupUpdateContext;
