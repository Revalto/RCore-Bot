import Context, { IContextOptions } from './context';
import MessageReply from '../shared/message-reply';
import MessageForwardsCollection from '../shared/message-forwards-collection';
import { Attachment, ExternalAttachment } from '../attachments';
import Attachmentable, { IAllAttachmentable } from '../shared/attachmentable';
import { inspectCustomData } from '../../utils/constants';
import { AllowArray } from '../../types';
import { UploadSource, UploadSourceValue } from '../../upload/upload';
declare const kForwards: unique symbol;
declare const kReplyMessage: unique symbol;
declare const kAttachments: unique symbol;
export interface IMessageContextPayload {
    message: {
        id: number;
        conversation_message_id: number;
        out: number;
        peer_id: number;
        from_id: number;
        text?: string;
        date: number;
        random_id: number;
        ref?: string;
        ref_source?: string;
        attachments: object[];
        important: boolean;
        geo: object | null;
        payload?: string;
        fwd_messages?: object[];
        reply_message?: object;
        action?: {
            type: string;
            member_id: number;
            text?: string;
            email?: string;
            photo?: {
                photo_50: string;
                photo_100: string;
                photo_200: string;
            };
        };
    };
    client_info: {
        button_actions: ('text' | 'vkpay' | 'open_app' | 'location')[];
        keyboard: boolean;
        inline_keyboard: boolean;
        lang_id: number;
    };
}
export declare type MessageContextOptions<S> = Omit<IContextOptions<IMessageContextPayload, S>, 'type' | 'subTypes'>;
declare class MessageContext<S = Record<string, any>> extends Context<IMessageContextPayload, S> {
    $match: RegExpMatchArray;
    text: string | null;
    protected $filled: boolean;
    protected [kForwards]: MessageForwardsCollection | null;
    protected [kAttachments]: (Attachment | ExternalAttachment)[] | null;
    protected [kReplyMessage]: MessageReply | null;
    constructor(options: MessageContextOptions<S>);
    /**
     * Load message payload
     */
    loadMessagePayload(): Promise<void>;
    /**
     * Checks if there is text
     */
    get hasText(): boolean;
    /**
     * Checks for reply message
     */
    get hasReplyMessage(): boolean;
    /**
     * Checks for forwarded messages
     */
    get hasForwards(): boolean;
    /**
     * Checks for hast message payload
     */
    get hasMessagePayload(): boolean;
    /**
     * Checks if there is text
     */
    get hasGeo(): boolean;
    /**
     * Checks is a chat
     */
    get isChat(): boolean;
    /**
     * Check is a user
     */
    get isUser(): boolean;
    /**
     * Checks is a group
     */
    get isGroup(): boolean;
    /**
     * Checks is from the user
     */
    get isFromUser(): boolean;
    /**
     * Checks is from the group
     */
    get isFromGroup(): boolean;
    /**
     * Checks a message has arrived in direct messages
     */
    get isDM(): boolean;
    /**
     * Check is special event
     */
    get isEvent(): boolean;
    /**
     * Checks whether the message is outbox
     */
    get isOutbox(): boolean;
    /**
     * Checks whether the message is inbox
     */
    get isInbox(): boolean;
    /**
     * Checks that the message is important
     */
    get isImportant(): boolean;
    /**
     * Returns the identifier message
     */
    get id(): number;
    /**
     * Returns the conversation message id
     */
    get conversationMessageId(): number | null;
    /**
     * Returns the destination identifier
     */
    get peerId(): number;
    /**
     * Returns the peer type
     */
    get peerType(): string;
    /**
     * Returns the sender identifier
     */
    get senderId(): number;
    /**
     * Returns the sender type
     */
    get senderType(): string;
    /**
     * Returns the identifier chat
     */
    get chatId(): number | null;
    /**
     * Returns the referral value
     */
    get referralValue(): string | undefined;
    /**
     * Returns the referral source
     */
    get referralSource(): string | undefined;
    /**
     * Returns the date when this message was created
     */
    get createdAt(): number;
    /**
     * Returns geo
     */
    get geo(): object | null;
    /**
     * Returns the event name
     */
    get eventType(): string | null;
    /**
     * Returns the event member id
     */
    get eventMemberId(): number | null;
    /**
     * Returns the event name
     */
    get eventText(): string | null;
    /**
     * Returns the event email
     */
    get eventEmail(): string | null;
    /**
     * Returns the message payload
     */
    get messagePayload(): any | null;
    /**
     * Returns the forwards
     */
    get forwards(): MessageForwardsCollection;
    /**
     * Returns the reply message
     */
    get replyMessage(): MessageReply | null;
    /**
     * Returns the attachments
     */
    get attachments(): (Attachment | ExternalAttachment)[];
    /**
     * Returns the capabilities of the client the user is using.
     */
    get clientInfo(): IMessageContextPayload['client_info'];
    /**
     * Gets a link to invite the user to a conversation
     */
    getInviteLink(params?: object): Promise<object>;
    /**
     * Edits a message
     */
    editMessage(params: object): Promise<number>;
    /**
     * Edits a message text
     */
    editMessageText(message: string): Promise<number>;
    /**
     * Sends a message to the current dialog
     */
    send(text: string | object, params?: object): Promise<number>;
    /**
     * Responds to the current message
     */
    reply(text: string | object, params?: object): Promise<number>;
    /**
     * Sends a sticker to the current dialog
     */
    sendSticker(id: number): Promise<number>;
    /**
     * Sends a photos to the current dialog
     */
    sendPhotos(rawSources: AllowArray<UploadSource>, params?: object): Promise<number>;
    /**
     * @deprecated
     */
    sendPhoto(rawSources: AllowArray<UploadSource>, params?: object): Promise<number>;
    /**
     * Sends a documents to the current dialog
     */
    sendDocuments(rawSources: AllowArray<UploadSource>, params?: object): Promise<number>;
    /**
     * @deprecated
     */
    sendDocument(rawSources: AllowArray<UploadSource>, params?: object): Promise<number>;
    /**
     * Sends a audio message to the current dialog
     */
    sendAudioMessage(source: UploadSource, params?: object): Promise<number>;
    /**
     * Changes the status of typing in the dialog
     */
    setActivity(): Promise<boolean>;
    /**
     * Marks messages as important or removes a mark
     */
    markAsImportant(ids?: number[], options?: {
        important: number;
    }): Promise<number[]>;
    /**
     * Deletes the message
     */
    deleteMessage(ids?: number[], options?: {
        spam: number;
    }): Promise<number>;
    /**
     * Restores the message
     */
    restoreMessage(): Promise<boolean>;
    /**
     * Rename the chat
     */
    renameChat(title: string): Promise<boolean>;
    /**
     * Sets a new image for the chat
     */
    newChatPhoto(source: UploadSourceValue, params?: object): Promise<object>;
    /**
     * Remove the chat photo
     */
    deleteChatPhoto(): Promise<boolean>;
    /**
     * Invites a new user
     */
    inviteUser(id?: number): Promise<boolean>;
    /**
     * Excludes user
     */
    kickUser(id?: number): Promise<boolean>;
    /**
     * Pins a message
     */
    pinMessage(): Promise<boolean>;
    /**
     * Unpins a message
     */
    unpinMessage(): Promise<boolean>;
    /**
     * Return alias of payload.message
     */
    protected get message(): IMessageContextPayload['message'];
    /**
     * Applies the payload
     */
    private applyPayload;
    /**
     * Checks that in a chat
     */
    private assertIsChat;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
interface MessageContext extends Attachmentable, IAllAttachmentable {
}
export default MessageContext;
