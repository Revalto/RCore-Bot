import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IVoteContextPayload {
    poll_id: number;
    user_id: number;
    owner_id: number;
    option_id: number;
}
export declare type VoteContextOptions<S> = Omit<IContextOptions<IVoteContextPayload, S>, 'type' | 'subTypes'>;
export default class VoteContext<S = Record<string, any>> extends Context<IVoteContextPayload, S> {
    constructor(options: VoteContextOptions<S>);
    /**
     * Returns the identifier poll
     */
    get id(): number;
    /**
     * Returns the identifier user
     */
    get userId(): number;
    /**
     * Returns the identifier owner
     */
    get ownerId(): number;
    /**
     * Returns the identifier option
     */
    get optionId(): number;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
