import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface ITypingContextPayload {
    from_id: number;
    to_id: number;
    state: string;
}
export declare type TypingContextOptions<S> = Omit<IContextOptions<ITypingContextPayload, S>, 'type' | 'subTypes'>;
export default class TypingContext<S = Record<string, any>> extends Context<ITypingContextPayload, S> {
    constructor(options: TypingContextOptions<S>);
    /**
     * Checks is typing
     */
    get isTyping(): boolean;
    /**
     * Checks is record audio message
     */
    get isAudioMessage(): boolean;
    /**
     * Checks that the message is typed in the dm
     */
    get isUser(): boolean;
    /**
     * Checks that the message is typed in the chat
     */
    get isGroup(): boolean;
    /**
     * Checks that the message is typed in the chat
     */
    get isChat(): boolean;
    /**
     * Returns the identifier sender
     */
    get fromId(): number;
    /**
     * Returns the identifier destination
     */
    get toId(): number;
    /**
     * @deprecated
     */
    get peerId(): number;
    /**
     * @deprecated
     */
    get userId(): number;
    /**
     * Returns the identifier chat
     */
    get chatId(): number | null;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
