import VK from '../../vk';
import Attachment from './attachment';
import { inspectCustomData } from '../../utils/constants';
export interface IPhotoSize {
    type: string;
    url: string;
    width: number;
    height: number;
}
export interface IPhotoAttachmentPayload {
    id: number;
    owner_id: number;
    access_key?: string;
    album_id?: number;
    user_id?: number;
    text?: string;
    date?: number;
    sizes?: IPhotoSize[];
    width?: number;
    height?: number;
}
export default class PhotoAttachment extends Attachment<IPhotoAttachmentPayload> {
    /**
     * Constructor
     */
    constructor(payload: IPhotoAttachmentPayload, vk?: VK);
    /**
     * Load attachment payload
     */
    loadAttachmentPayload(): Promise<void>;
    /**
     * Returns the ID of the user who uploaded the image
     */
    get userId(): number | null;
    /**
     * Returns the ID of the album
     */
    get albumId(): number | null;
    /**
     * Returns the photo text
     */
    get text(): string | null;
    /**
     * Returns the date when this photo was created
     */
    get createdAt(): number | null;
    /**
     * Returns the photo height
     */
    get height(): number | null;
    /**
     * Returns the photo width
     */
    get width(): number | null;
    /**
     * Returns the URL of a small photo
     * (130 or 75)
     */
    get smallPhoto(): string | null;
    /**
     * Returns the URL of a medium photo
     * (807 or 604 or less)
     */
    get mediumPhoto(): string | null;
    /**
     * Returns the URL of a large photo
     * (2560 or 1280 or less)
     */
    get largePhoto(): string | null;
    /**
     * Returns the sizes
     */
    get sizes(): IPhotoSize[] | null;
    /**
     * Returns the sizes of the required types
     */
    getSizes(sizeTypes: string[]): IPhotoSize[];
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
