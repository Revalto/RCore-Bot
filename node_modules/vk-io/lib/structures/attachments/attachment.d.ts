/// <reference types="node" />
import { inspect } from 'util';
import VK from '../../vk';
import { inspectCustomData, AttachmentType } from '../../utils/constants';
export default class Attachment<P = {}> {
    type: AttachmentType | string;
    ownerId: number;
    id: number;
    accessKey: string | null;
    protected $filled: boolean;
    protected vk: VK;
    protected payload: P;
    /**
     * Constructor
     */
    constructor(type: AttachmentType | string, ownerId: number | string, id: number | string, accessKey?: string | null);
    /**
     * Returns custom tag
     */
    get [Symbol.toStringTag](): string;
    /**
     * Parse attachment with string
     */
    static fromString(attachment: string): Attachment;
    /**
     * Returns whether the attachment is filled
     */
    get isFilled(): boolean;
    /**
     * Can be attached via string representation
     */
    get canBeAttached(): boolean;
    /**
     * Checks that the attachment is equivalent with object
     */
    equals(attachment: Attachment | string): boolean;
    /**
     * Returns a string to attach a VK
     */
    toString(): string;
    /**
     * Returns data for JSON
     */
    toJSON(): object;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
