/// <reference types="node" />
import { inspect } from 'util';
import VK from '../../vk';
import Attachmentable from './attachmentable';
import { Attachment, ExternalAttachment } from '../attachments';
declare const kAttachments: unique symbol;
declare class MessageReply {
    protected vk: VK;
    protected payload: Record<string, any>;
    protected [kAttachments]: (Attachment | ExternalAttachment)[];
    /**
     * Constructor
     */
    constructor(payload: object, vk?: VK);
    /**
     * Returns custom tag
     */
    get [Symbol.toStringTag](): string;
    /**
     * Checks if there is text
     */
    get hasText(): boolean;
    /**
     * Returns the identifier message
     */
    get id(): number;
    /**
     * Returns the conversation message id
     */
    get conversationMessageId(): number | null;
    /**
     * Returns the destination identifier
     */
    get peerId(): number;
    /**
     * Returns the date when this message was created
     */
    get createdAt(): number;
    /**
     * Returns the date when this message was updated
     */
    get updatedAt(): number;
    /**
     * Returns the message text
     */
    get senderId(): number;
    /**
     * Returns the message text
     */
    get text(): string | null;
    /**
     * Returns the attachments
     */
    get attachments(): (Attachment | ExternalAttachment)[];
    /**
     * Returns data for JSON
     */
    toJSON(): object;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
interface MessageReply extends Attachmentable {
}
export default MessageReply;
