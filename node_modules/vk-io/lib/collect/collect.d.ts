/// <reference types="node" />
import { inspect } from 'util';
import CollectStream, { ICollectStreamOptions } from './stream';
import VK from '../vk';
import Chain from './chain';
export interface ICollectStreamGroup {
    [key: string]: <T = Record<string, any>>(options: ICollectStreamOptions['options']) => CollectStream<T>;
}
export default class Collect {
    account: ICollectStreamGroup;
    ads: ICollectStreamGroup;
    apps: ICollectStreamGroup;
    audio: ICollectStreamGroup;
    board: ICollectStreamGroup;
    database: ICollectStreamGroup;
    docs: ICollectStreamGroup;
    fave: ICollectStreamGroup;
    friends: ICollectStreamGroup;
    gifts: ICollectStreamGroup;
    groups: ICollectStreamGroup;
    leads: ICollectStreamGroup;
    likes: ICollectStreamGroup;
    market: ICollectStreamGroup;
    messages: ICollectStreamGroup;
    notes: ICollectStreamGroup;
    orders: ICollectStreamGroup;
    photos: ICollectStreamGroup;
    places: ICollectStreamGroup;
    polls: ICollectStreamGroup;
    storage: ICollectStreamGroup;
    users: ICollectStreamGroup;
    utils: ICollectStreamGroup;
    video: ICollectStreamGroup;
    wall: ICollectStreamGroup;
    widgets: ICollectStreamGroup;
    protected vk: VK;
    /**
     * constructor
     */
    constructor(vk: VK);
    /**
     * Returns custom tag
     */
    get [Symbol.toStringTag](): string;
    /**
     * Returns new Chain instance
     */
    chain(): Chain;
    /**
     * Call multiple executors
     */
    executes(method: string, queue: Record<string, any>[]): Promise<{
        response: any[];
        errors: any[];
    }>;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
