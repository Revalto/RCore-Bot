/// <reference types="node" />
import { inspect } from 'util';
import { APIMethods } from './schemas/methods';
import VK from '../vk';
import APIRequest from './request';
import { APIError } from '../errors';
/**
 * Working with API methods
 */
export default class API extends APIMethods {
    private queue;
    private started;
    private suspended;
    private vk;
    /**
     * Constructor
     */
    constructor(vk: VK);
    /**
     * Returns custom tag
     */
    get [Symbol.toStringTag](): string;
    /**
     * Returns the current used API version
     */
    get API_VERSION(): string;
    /**
     * Call execute method
     */
    execute(params: object): Promise<any>;
    /**
     * Call execute procedure
     */
    procedure(name: string, params: object): Promise<any>;
    /**
     * Call raw method
     */
    call(method: string, params: object): Promise<any>;
    /**
     * Adds request for queue
     */
    callWithRequest(request: APIRequest): Promise<any>;
    /**
     * Adds method to queue
     */
    enqueue(method: string, params: object): Promise<any>;
    /**
     * Adds an element to the beginning of the queue
     */
    protected requeue(request: APIRequest): void;
    /**
     * Running queue
     */
    private worker;
    /**
     * Calls the api method
     */
    protected callMethod(request: APIRequest): Promise<void>;
    /**
     * Error API handler
     */
    handleError(request: APIRequest, error: APIError): Promise<void>;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
